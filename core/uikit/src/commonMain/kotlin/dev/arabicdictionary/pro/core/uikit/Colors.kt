package dev.arabicdictionary.pro.core.uikit

import androidx.compose.runtime.Immutable
import androidx.compose.runtime.staticCompositionLocalOf
import androidx.compose.ui.graphics.Color
import androidx.compose.material3.ColorScheme as M3ColorScheme

internal val LocalColorScheme = staticCompositionLocalOf { lightColorScheme() }

internal fun lightColorScheme(): ColorScheme {
    return ColorScheme(
        primary = Color(BLUE_GENIE),
        onPrimary = Color(WHITE_SMOKE),
        primaryContainer = Color(BLUE_GENIE),
        onPrimaryContainer = Color(WHITE_SMOKE),
        secondary = Color(LAVISH_SPENDING),
        onSecondary = Color(WHITE_SMOKE),
        secondaryContainer = Color(LAVISH_SPENDING),
        onSecondaryContainer = Color(WHITE_SMOKE),
        tertiary = Color(ALLEGIANCE),
        onTertiary = Color(WHITE_SMOKE),
        tertiaryContainer = Color(ALLEGIANCE),
        onTertiaryContainer = Color(WHITE_SMOKE),
        error = Color(SALMON_SASHIMI),
        onError = Color(ENGLISH_BREAKFAST),
        errorContainer = Color(TOMATO_BURST),
        onErrorContainer = Color(POWDERED_BLUSH),
        surfaceBright = Color.White,
        surface = Color.White,
        surfaceVariant = Color(DARK_NAVY),
        surfaceDim = Color(IRIS_ICE),
        surfaceContainerHighest = Color(SWEET_HARBOR_1),
        surfaceContainerHigh = Color(ICY_LAVENDER),
        surfaceContainer = Color(SOLITUDE),
        surfaceContainerLow = Color(AIRCRAFT_WHITE),
        surfaceContainerLowest = Color.White,
        onSurface = Color(SATIN_DEEP_BLACK),
        onSurfaceVariant = Color(NIGHT_GREY),
        outline = Color(CHIVALROUS),
        outlineVariant = Color(SWEET_HARBOR_2),
        inversePrimary = Color(PERIWINKLE),
        inverseSurface = Color(ABSENCE_OF_LIGHT_1),
        inverseOnSurface = Color(ALPINE_GOAT),
        scrim = Color.Black,
        surfaceTint = Color(KUROI_BLACK),
        background = Color.Black,
        onBackground = Color.White,
        onSurfaceDim = Color(FEATHER_FALLS),
        outlineDim = Color(ABSENCE_OF_LIGHT_2),
        inverseOutline = Color(GENTEEL_LAVENDER),
        inverseOnSurfaceVariant = Color(PENCIL_LEAD),
        inverseOnSurfaceDim = Color(BLUE_INTRIGUE),
        assetApproved = Color(MYSTICAL_SHADE),
        assetNoStatus = Color(RAINBOW_TROUT),
        assetNeedsReview = Color(SKYAN),
        assetInProgress = Color(TEALISH),
    )
}

internal fun darkColorScheme(): ColorScheme {
    return ColorScheme(
        primary = Color(BLUE_GENIE),
        onPrimary = Color(WHITE_SMOKE),
        primaryContainer = Color(BLUE_GENIE),
        onPrimaryContainer = Color(WHITE_SMOKE),
        secondary = Color(LAVISH_SPENDING),
        onSecondary = Color(WHITE_SMOKE),
        secondaryContainer = Color(LAVISH_SPENDING),
        onSecondaryContainer = Color(WHITE_SMOKE),
        tertiary = Color(ALLEGIANCE),
        onTertiary = Color(WHITE_SMOKE),
        tertiaryContainer = Color(ALLEGIANCE),
        onTertiaryContainer = Color(WHITE_SMOKE),
        error = Color(SALMON_SASHIMI),
        onError = Color(BLOOD_ORGAN),
        errorContainer = Color(TOMATO_BURST),
        onErrorContainer = Color(POWDERED_BLUSH),
        surfaceBright = Color(MYSTICAL_SHADE),
        surface = Color(COARSE_WOOL),
        surfaceVariant = Color(SWEET_HARBOR_1),
        surfaceDim = Color.Black,
        surfaceContainerHighest = Color(DARK_NAVY),
        surfaceContainerHigh = Color(OLD_MILL),
        surfaceContainer = Color(MIDNIGHT_EXPRESS),
        surfaceContainerLow = Color(KUROI_BLACK),
        surfaceContainerLowest = Color(RUINED_SMORES),
        onSurface = Color(WHITE_SMOKE),
        onSurfaceVariant = Color(ZEN_BLUE),
        outline = Color(VOYAGER),
        outlineVariant = Color(PAUPER),
        inversePrimary = Color(COBALITE),
        inverseSurface = Color.White,
        inverseOnSurface = Color(WASHED_BLACK),
        scrim = Color.Black,
        surfaceTint = Color.White,
        background = Color.White,
        onBackground = Color.Black,
        onSurfaceDim = Color(BRITISH_SHORTHAIR),
        outlineDim = Color(CLASSIC_CLOUD),
        inverseOutline = Color(INDIA_INK),
        inverseOnSurfaceVariant = Color(ZEN_BLUE),
        inverseOnSurfaceDim = Color(ALLEY_CAT),
        assetApproved = Color(MYSTICAL_SHADE),
        assetNoStatus = Color.White,
        assetNeedsReview = Color(SKYAN),
        assetInProgress = Color(TEALISH),
    )
}

@Immutable
data class ColorScheme(
    val primary: Color,
    val onPrimary: Color,
    val primaryContainer: Color,
    val onPrimaryContainer: Color,
    val inversePrimary: Color,
    val secondary: Color,
    val onSecondary: Color,
    val secondaryContainer: Color,
    val onSecondaryContainer: Color,
    val tertiary: Color,
    val onTertiary: Color,
    val tertiaryContainer: Color,
    val onTertiaryContainer: Color,
    val background: Color,
    val onBackground: Color,
    val surface: Color,
    val onSurface: Color,
    val surfaceVariant: Color,
    val onSurfaceVariant: Color,
    val surfaceTint: Color,
    val inverseSurface: Color,
    val inverseOnSurface: Color,
    val error: Color,
    val onError: Color,
    val errorContainer: Color,
    val onErrorContainer: Color,
    val outline: Color,
    val outlineVariant: Color,
    val scrim: Color,
    val surfaceBright: Color,
    val surfaceDim: Color,
    val surfaceContainer: Color,
    val surfaceContainerHigh: Color,
    val surfaceContainerHighest: Color,
    val surfaceContainerLow: Color,
    val surfaceContainerLowest: Color,
    val onSurfaceDim: Color,
    val outlineDim: Color,
    val inverseOutline: Color,
    val inverseOnSurfaceVariant: Color,
    val inverseOnSurfaceDim: Color,
    val assetNoStatus: Color,
    val assetNeedsReview: Color,
    val assetInProgress: Color,
    val assetApproved: Color,
)

internal fun ColorScheme.toM3ColorScheme(): M3ColorScheme {
    return M3ColorScheme(
        primary = primary,
        onPrimary = onPrimary,
        primaryContainer = primaryContainer,
        onPrimaryContainer = onPrimaryContainer,
        inversePrimary = inversePrimary,
        secondary = secondary,
        onSecondary = onSecondary,
        secondaryContainer = secondaryContainer,
        onSecondaryContainer = onSecondaryContainer,
        tertiary = tertiary,
        onTertiary = onTertiary,
        tertiaryContainer = tertiaryContainer,
        onTertiaryContainer = onTertiaryContainer,
        background = background,
        onBackground = onBackground,
        surface = surface,
        onSurface = onSurface,
        surfaceVariant = surfaceVariant,
        onSurfaceVariant = onSurfaceVariant,
        surfaceTint = surfaceTint,
        inverseSurface = inverseSurface,
        inverseOnSurface = inverseOnSurface,
        error = error,
        onError = onError,
        errorContainer = errorContainer,
        onErrorContainer = onErrorContainer,
        outline = outline,
        outlineVariant = outlineVariant,
        scrim = scrim,
        surfaceBright = surfaceBright,
        surfaceDim = surfaceDim,
        surfaceContainer = surfaceContainer,
        surfaceContainerHigh = surfaceContainerHigh,
        surfaceContainerHighest = surfaceContainerHighest,
        surfaceContainerLow = surfaceContainerLow,
        surfaceContainerLowest = surfaceContainerLowest,
    )
}
